Resources:
  UserProfilesTable:
    Type: "AWS::DynamoDB::Table"
    # DeletionPolicy: Retain
    Properties:
      TableName: "${self:custom.name}-user-profiles"
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: recordState
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: recordStateIndex
          KeySchema:
            - AttributeName: recordState
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: ${self:custom.env.ReadCapacityUnits.${self:provider.stage}, self:custom.env.ReadCapacityUnits.default}
            WriteCapacityUnits: ${self:custom.env.WriteCapacityUnits.${self:provider.stage}, self:custom.env.WriteCapacityUnits.default}
      ProvisionedThroughput:
        ReadCapacityUnits: ${self:custom.env.ReadCapacityUnits.${self:provider.stage}, self:custom.env.ReadCapacityUnits.default}
        WriteCapacityUnits: ${self:custom.env.WriteCapacityUnits.${self:provider.stage}, self:custom.env.WriteCapacityUnits.default}
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      BillingMode: PAY_PER_REQUEST
# Export table name
Outputs:
  UserProfilesTableName:
    Description: Name of the DynamoDB table
    Value:
      Ref: UserProfilesTable
    Export:
      Name: "UserProfilesTableName-${self:custom.name}"
  UserProfilesTableStreamArn:
    Description: ARN of the DynamoDB table
    Value:
      Fn::GetAtt: [UserProfilesTable, StreamArn]
    Export:
      Name: "UserProfilesTableStreamArn-${self:custom.name}"
